# app/scripts/reset_db.py
from __future__ import annotations
import argparse
import pathlib
import os
from sqlalchemy import text
from app.deps import SessionLocal
from app.config import settings
from app.models import User, Payment, Subscription, Base  # Base = declarative_base()

def _detect_sqlite_path() -> pathlib.Path | None:
    url = getattr(settings, "DATABASE_URL", "sqlite:///./stylenest.db")
    if url.startswith("sqlite"):
        # sqlite:///./stylenest.db  or sqlite:///stylenest.db
        raw = url.split("sqlite:///")[-1]
        return pathlib.Path(raw).resolve()
    return None

def soft_reset() -> None:
    """–ß–∏—Å—Ç–∏–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö, —Å—Ö–µ–º–∞ –æ—Å—Ç–∞—ë—Ç—Å—è."""
    with SessionLocal() as db:
        # –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å FK
        db.query(Payment).delete()        # –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        db.query(Subscription).delete()   # –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        db.query(User).delete()           # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        db.commit()
    print("‚úÖ Soft reset: —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã.")

def hard_reset() -> None:
    """–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª SQLite –∏ —Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É –∑–∞–Ω–æ–≤–æ."""
    db_path = _detect_sqlite_path()
    if db_path and db_path.exists():
        db_path.unlink()
        print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –ë–î: {db_path}")
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–¥–∏–º —Å—Ö–µ–º—É –∑–∞–Ω–æ–≤–æ.")

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É
    with SessionLocal() as db:
        engine = db.get_bind()
        Base.metadata.create_all(bind=engine)
    print("‚úÖ Hard reset: —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ.")

def main():
    parser = argparse.ArgumentParser(description="Reset database")
    grp = parser.add_mutually_exclusive_group(required=True)
    grp.add_argument("--soft", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã (—Å—Ö–µ–º—É –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å)")
    grp.add_argument("--hard", action="store_true", help="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª SQLite –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É")
    args = parser.parse_args()

    if args.hard:
        hard_reset()
    else:
        soft_reset()

if __name__ == "__main__":
    main()
