# app/tasks/winback.py
from __future__ import annotations

import logging
from datetime import datetime, timedelta, timezone

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from app.config import settings
from app.deps import SessionLocal
from app.models import User, Payment, PaymentStatus

logger = logging.getLogger(__name__)

CHECK_EVERY_SECONDS = 60  # –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å


def _tariffs_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–ª—è winback-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"1 –º—ñ—Å—è—Ü—å ‚Äì {settings.TARIFF_1M_PRICE_EUR}‚Ç¨", callback_data="pay:1m")],
            [InlineKeyboardButton(text=f"2 –º—ñ—Å—è—Ü—ñ ‚Äì {settings.TARIFF_2M_PRICE_EUR}‚Ç¨", callback_data="pay:2m")],
            [InlineKeyboardButton(text=f"3 –º—ñ—Å—è—Ü—ñ ‚Äì {settings.TARIFF_3M_PRICE_EUR}‚Ç¨", callback_data="pay:3m")],
        ]
    )


async def _send_winback_message(bot: Bot, user: User) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç winback-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = "app/assets/IMG_0796.PNG"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            "–©–æ –≤–∞—Å —á–µ–∫–∞—î —É –≤–µ—Ä–µ—Å–Ω—ñüçÇ\n\n"
            "- 3 –≥–æ—Ç–æ–≤–∏—Ö –∫–∞–ø—Å—É–ª–∏ –Ω–∞ –æ—Å—ñ–Ω—å\n"
            "- –æ–≥–ª—è–¥–∏ –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤ (Zara, Mango, H&M, Reserved, Massimo Dutti, Cos, Stradivarius, Pull&bear, Bershka)\n"
            "- –õ–µ–∫—Ü—ñ—è: –Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≥–∞—Ä–¥–µ—Ä–æ–± –¥–æ –æ—Å–µ–Ω—ñ\n"
            "- –§–æ—Ä–º—É–ª–∏ –æ–±—Ä–∞–∑—ñ–≤ –Ω–∞ –æ—Å—ñ–Ω—å\n"
            "- –°—Ç–∏–ª—å–Ω—ñ –ø—Ä–∏–π–æ–º–∏ –≤ –æ–±—Ä–∞–∑–∞—Ö –Ω–∞ –æ—Å—ñ–Ω—å\n\n"
            "–û–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ —Ç–∞ –ø—Ä–∏—î–¥–Ω—É–π—Å—èüñ§"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        photo = FSInputFile(image_path)
        await bot.send_photo(
            chat_id=user.tg_id,
            photo=photo,
            caption=message_text,
            reply_markup=_tariffs_kb()
        )
        
        logger.info(f"[WINBACK] Winback-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}")
        return True
        
    except Exception as e:
        logger.error(f"[WINBACK] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ winback-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
        return False


async def process_winback_once(bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç winback-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–ø–ª–∞—Ç—ã"""
    now = datetime.now(timezone.utc)
    logger.info(f"[WINBACK] –ü—Ä–æ–≤–µ—Ä–∫–∞ winback-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {now}")
    
    with SessionLocal() as db:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        users_without_payment = (
            db.query(User)
            .outerjoin(Payment, Payment.tg_id == User.tg_id)
            .filter(
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                User.created_at.isnot(None),
                # –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                ~User.tg_id.in_(
                    db.query(Payment.tg_id)
                    .filter(Payment.status == PaymentStatus.approved)
                )
            )
            .all()
        )
        
        logger.info(f"[WINBACK] –ù–∞–π–¥–µ–Ω–æ {len(users_without_payment)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–ø–ª–∞—Ç—ã")
        
        # Winback —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        three_days_ago = now - timedelta(days=3)
        users_3d = [
            user for user in users_without_payment
            if (user.created_at.replace(tzinfo=timezone.utc) <= three_days_ago and 
                user.winback_3d_sent_at.is_(None))
        ]
        
        logger.info(f"[WINBACK] –ù–∞–π–¥–µ–Ω–æ {len(users_3d)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è winback —á–µ—Ä–µ–∑ 3 –¥–Ω—è")
        
        for user in users_3d:
            success = await _send_winback_message(bot, user)
            if success:
                user.winback_3d_sent_at = now
                logger.info(f"[WINBACK] Winback 3d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω {user.created_at})")
        
        # Winback —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
        seven_days_ago = now - timedelta(days=7)
        users_7d = [
            user for user in users_without_payment
            if (user.created_at.replace(tzinfo=timezone.utc) <= seven_days_ago and 
                user.winback_7d_sent_at.is_(None) and
                user.winback_3d_sent_at.isnot(None))  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3d
        ]
        
        logger.info(f"[WINBACK] –ù–∞–π–¥–µ–Ω–æ {len(users_7d)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è winback —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
        
        for user in users_7d:
            success = await _send_winback_message(bot, user)
            if success:
                user.winback_7d_sent_at = now
                logger.info(f"[WINBACK] Winback 7d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω {user.created_at})")
        
        # Winback —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
        thirty_days_ago = now - timedelta(days=30)
        users_30d = [
            user for user in users_without_payment
            if (user.created_at.replace(tzinfo=timezone.utc) <= thirty_days_ago and 
                user.winback_30d_sent_at.is_(None) and
                user.winback_7d_sent_at.isnot(None))  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 7d
        ]
        
        logger.info(f"[WINBACK] –ù–∞–π–¥–µ–Ω–æ {len(users_30d)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è winback —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π")
        
        for user in users_30d:
            success = await _send_winback_message(bot, user)
            if success:
                user.winback_30d_sent_at = now
                logger.info(f"[WINBACK] Winback 30d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω {user.created_at})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        if users_3d or users_7d or users_30d:
            db.commit()
            logger.info(f"[WINBACK] –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(users_3d) + len(users_7d) + len(users_30d)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")
        
        logger.info(f"[WINBACK] –û–±—Ä–∞–±–æ—Ç–∫–∞ winback –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 3d - {len(users_3d)}, 7d - {len(users_7d)}, 30d - {len(users_30d)}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è winback"""
    bot = Bot(settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    try:
        while True:
            await process_winback_once(bot)
            await asyncio.sleep(CHECK_EVERY_SECONDS)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
