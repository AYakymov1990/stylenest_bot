# app/web/payments.py
from __future__ import annotations

from datetime import datetime, timezone
from typing import Any, Dict, Optional

from fastapi import APIRouter, Request, HTTPException
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.config import settings
from app.deps import SessionLocal
from app.models import Payment, PaymentStatus
from app.services.subscriptions import ensure_active_subscription

router = APIRouter()


# ---------- helpers ----------

def _extract_paid_at(gw: Dict[str, Any]) -> datetime:
    """
    –ó–∞–±–∏—Ä–∞–µ–º timestamp –æ–ø–ª–∞—Ç—ã –∏–∑ –ø–æ–ª–µ–π WayForPay:
    processingDate / createdDate / settlementDate / orderTime / orderDate (unix).
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî —Ç–µ–∫—É—â–µ–µ UTC.
    """
    for key in ("processingDate", "createdDate", "settlementDate", "orderTime", "orderDate"):
        v = gw.get(key)
        if isinstance(v, (int, float)) and v > 0:
            try:
                return datetime.fromtimestamp(int(v), tz=timezone.utc)
            except Exception:
                pass
        if isinstance(v, str) and v.isdigit():
            try:
                return datetime.fromtimestamp(int(v), tz=timezone.utc)
            except Exception:
                pass
    return datetime.now(timezone.utc)


async def _approve_flow(db, p: Payment, data: Dict[str, Any]) -> None:
    """
    –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω—ã–º (–≤ –≠–¢–û–ô –ñ–ï —Å–µ—Å—Å–∏–∏ db),
    —Å—Ç–∞–≤–∏–º paid_at, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–∞–π—Ç.
    """
    # 1) –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
    paid_at = _extract_paid_at(data)
    if hasattr(p, "paid_at"):
        p.paid_at = paid_at
    p.status = PaymentStatus.approved
    db.flush()   # –æ–±—ä–µ–∫—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî add() –ù–ï –ù–£–ñ–ï–ù
    db.commit()

    # 2) –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –∏–Ω–≤–∞–π—Ç
    bot = Bot(settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    try:
        sub = await ensure_active_subscription(
            db=db,
            bot=bot,
            tg_id=p.tg_id,
            tariff_code=p.tariff_code,
        )

        text = "–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É ü§ç –ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ."
        kb = None
        invite_link = getattr(sub, "invite_link", None)
        if invite_link:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –í—Å—Ç—É–ø–∏—Ç–∏", url=invite_link)]
            ])
        await bot.send_message(p.tg_id, text if kb else text + "\n–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
        if kb:
            # –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω–≤–∞–π—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è
            await bot.send_message(p.tg_id, "–í–∞—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è:", reply_markup=kb)
    finally:
        await bot.session.close()


# ---------- core processor ----------

async def _process_wfp_callback(payload: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–±—ç–∫–∞ WayForPay.
    –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {"status":"accept"} –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ä–µ—Ç—Ä–∞–µ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ WFP.
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º.
    """
    print("WFP CALLBACK:", payload)

    order_reference = payload.get("orderReference") or payload.get("order_reference")
    status_raw = payload.get("transactionStatus") or payload.get("orderStatus") or ""
    status = str(status_raw).strip().capitalize()

    if not order_reference:
        # –¥–∞–∂–µ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω—ë–º accept, –∏–Ω–∞—á–µ WFP –±—É–¥–µ—Ç –¥–æ–ª–±–∏—Ç—å —Ä–µ—Ç—Ä–∞—è–º–∏
        return {"status": "accept", "orderReference": order_reference or ""}

    with SessionLocal() as db:
        p: Optional[Payment] = db.query(Payment).filter(
            Payment.order_reference == order_reference
        ).one_or_none()

        if not p:
            # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–º
            return {"status": "accept", "orderReference": order_reference}

        try:
            if status == "Approved":
                if p.status != PaymentStatus.approved:
                    # –¥–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑
                    await _approve_flow(db, p, payload)
                # –µ—Å–ª–∏ —É–∂–µ Approved ‚Äî –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            elif status in {"Declined", "Expired"}:
                # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º
                p.status = (PaymentStatus.declined if status == "Declined"
                            else PaymentStatus.expired)
                db.flush()
                db.commit()
            else:
                # InProcessing / Waiting –∏ —Ç.–ø. ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º
                pass
        except Exception as e:
            # –õ–æ–≥ –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ accept, —á—Ç–æ–±—ã WFP –Ω–µ —Å–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ.
            print("WFP PROCESS ERROR:", repr(e))

    return {"status": "accept", "orderReference": order_reference}


# ---------- routes ----------

@router.post("/wfp/callback")
async def wfp_callback(request: Request):
    data = await request.json()
    return await _process_wfp_callback(data)

# –¥—É–±–ª–∏–∫–∞—Ç —Å–æ —Å–ª—ç—à–µ–º ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫—Å–∏–∫–∏/–∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–¥–∞—é—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
@router.post("/wfp/callback/")
async def wfp_callback_slash(request: Request):
    data = await request.json()
    return await _process_wfp_callback(data)

# –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
# curl -X POST http://localhost:8080/wfp/mock/callback \
#   -H 'Content-Type: application/json' \
#   -d '{"orderReference":"tg123_1700000000_1m","transactionStatus":"Approved"}'
@router.post("/wfp/mock/callback")
async def wfp_mock_callback(request: Request):
    data = await request.json()
    return await _process_wfp_callback(data)